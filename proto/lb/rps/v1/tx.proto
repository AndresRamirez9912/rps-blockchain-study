syntax = "proto3";
package lb.rps.v1;

option go_package = "challenge/x/rps/types"; // store the generated files here

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "lb/rps/v1/types.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateStudent creates an student
  rpc CreateStudent(MsgCreateStudent) returns (MsgCreateStudentResponse);
  // MakeMove submit a move to the specific game
  rpc MakeMove(MsgMakeMove) returns (MsgMakeMoveResponse);
}

// MsgCreateStudent defines the MsgCreateStudent request type
message MsgCreateStudent {
  option (cosmos.msg.v1.signer) = "id"; // Define who is the signer of the transaction

  string id = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string name = 2;
  uint64 age = 3;
}

// MsgCreateStudent defines the MsgCreateStudent response type
message MsgCreateStudentResponse {}

// MsgMakeMove defines the MsgMakeMove request type
message MsgMakeMove {
  option (cosmos.msg.v1.signer) =
      "player"; // Define who is the signer in the request

  // Player is the message sender
  string player = 1;
  uint64 game_index = 2;
  string move = 3;
}

// MsgMakeMove defines the MsgMakeMove response type
message MsgMakeMoveResponse {}
